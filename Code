// unzip
(ZIPFile) =>
let
    Header = BinaryFormat.Record([
        MiscHeader = BinaryFormat.Binary(14),
        BinarySize = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),
        FileSize   = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),
        FileNameLen= BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian),
        ExtrasLen  = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian)    
    ]),
 
    HeaderChoice = BinaryFormat.Choice(
        BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),
        each if _ <> 67324752             // not the IsValid number? then return a dummy formatter
            then BinaryFormat.Record([IsValid = false, Filename=null, Content=null])
            else BinaryFormat.Choice(
                    BinaryFormat.Binary(26),      // Header payload - 14+4+4+2+2
                    each BinaryFormat.Record([
                        IsValid  = true,
                        Filename = BinaryFormat.Text(Header(_)[FileNameLen]),
                        Extras   = BinaryFormat.Text(Header(_)[ExtrasLen]),
                        Content  = BinaryFormat.Transform(
                            BinaryFormat.Binary(Header(_)[BinarySize]),
                            (x) => try Binary.Buffer(Binary.Decompress(x, Compression.Deflate)) otherwise null
                        )
                        ]),
                        type binary                   // enable streaming
                )
    ),
 
    ZipFormat = BinaryFormat.List(HeaderChoice, each _[IsValid] = true),
 
    Entries = List.Transform(
        List.RemoveLastN( ZipFormat(ZIPFile), 1),
        (e) => [FileName = e[Filename], Content = e[Content] ]
    )
in
    Table.FromRecords(Entries)

// postcodes
let
    Source = Web.Contents("https://www.doogal.co.uk/files/postcodes.zip")
in
    Source

// Invoked Function
let
    Source = unzip( postcodes ),
    Content = Source{0}[Content],
    #"Imported CSV" = Csv.Document(Content,[Delimiter=",", Columns=49, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(#"Imported CSV", [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Postcode", type text}, {"In Use?", type text}, {"Latitude", type number}, {"Longitude", type number}, {"Easting", Int64.Type}, {"Northing", Int64.Type}, {"Grid Ref", type text}, {"County", type text}, {"District", type text}, {"Ward", type text}, {"District Code", type text}, {"Ward Code", type text}, {"Country", type text}, {"County Code", type text}, {"Constituency", type text}, {"Introduced", type date}, {"Terminated", type date}, {"Parish", type text}, {"National Park", type text}, {"Population", type text}, {"Households", type text}, {"Built up area", type text}, {"Built up sub-division", type text}, {"Lower layer super output area", type text}, {"Rural/urban", type text}, {"Region", type text}, {"Altitude", Int64.Type}, {"London zone", type text}, {"LSOA Code", type text}, {"Local authority", type text}, {"MSOA Code", type text}, {"Middle layer super output area", type text}, {"Parish Code", type text}, {"Census output area", type text}, {"Constituency Code", type text}, {"Index of Multiple Deprivation", Int64.Type}, {"Quality", Int64.Type}, {"User Type", Int64.Type}, {"Last updated", type date}, {"Nearest station", type text}, {"Distance to station", type number}, {"Postcode area", type text}, {"Postcode district", type text}, {"Police force", type text}, {"Water company", type text}, {"Plus Code", type text}, {"Average Income", type text}, {"Sewage Company", type text}, {"Travel To Work Area", type text}})
in
    #"Changed Type"
